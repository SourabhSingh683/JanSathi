
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { MessageSquare, Send, CheckCircle, AlertCircle } from "lucide-react";
import ChatInterface from "@/components/ChatInterface";
import { generateGrievanceResponse } from "@/utils/grievanceAI";

interface Message {
  type: "bot" | "user";
  content: string;
  isComplete?: boolean;
}

const Grievance = () => {
  const [step, setStep] = useState(0);
  const [language, setLanguage] = useState("english");
  const [isLoading, setIsLoading] = useState(false);
  const [grievanceData, setGrievanceData] = useState({
    name: "",
    contact: "",
    email: "",
    type: "",
    description: "",
    location: "",
    date: "",
    urgency: "",
    previousReport: "",
    outcome: ""
  });
  const [messages, setMessages] = useState<Message[]>([
    {
      type: "bot",
      content: "üôè Namaste! I'm your Grievance Assistant. I'm here to help you file and track your complaints.\n\nI'll guide you through the process step by step. Let's start!\n\nMay I know your full name?"
    }
  ]);

  const grievanceTypes = {
    english: [
      "Corruption", "Harassment", "Service Delay", "Poor Infrastructure", "Water Issues",
      "Electricity Problems", "Healthcare Issues", "Education Problems", "Transport Issues",
      "Environmental Concerns", "Other"
    ],
    hindi: [
      "‡§≠‡•ç‡§∞‡§∑‡•ç‡§ü‡§æ‡§ö‡§æ‡§∞", "‡§â‡§§‡•ç‡§™‡•Ä‡§°‡§º‡§®", "‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§∞‡•Ä", "‡§ñ‡§∞‡§æ‡§¨ ‡§¢‡§æ‡§Ç‡§ö‡§æ", "‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ",
      "‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ", "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ", "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ", "‡§™‡§∞‡§ø‡§µ‡§π‡§® ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ",
      "‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ", "‡§Ö‡§®‡•ç‡§Ø"
    ]
  };

  const urgencyLevels = {
    english: ["Low", "Medium", "High", "Immediate"],
    hindi: ["‡§ï‡§Æ", "‡§Æ‡§ß‡•ç‡§Ø‡§Æ", "‡§â‡§ö‡•ç‡§ö", "‡§§‡§§‡•ç‡§ï‡§æ‡§≤"]
  };

  const handleUserMessage = async (message: string) => {
    setMessages(prev => [...prev, { type: "user", content: message }]);
    setIsLoading(true);
    
    try {
      let botResponse = "";
      
      switch(step) {
        case 0:
          setGrievanceData(prev => ({ ...prev, name: message }));
          botResponse = language === "english"
            ? "Thank you! Please provide your contact number:"
            : "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡•á‡§Ç:";
          setStep(1);
          break;
          
        case 1:
          setGrievanceData(prev => ({ ...prev, contact: message }));
          botResponse = language === "english"
            ? "Please provide your email address (optional):"
            : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§¶‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï):";
          setStep(2);
          break;
          
        case 2:
          setGrievanceData(prev => ({ ...prev, email: message }));
          botResponse = language === "english"
            ? "What type of grievance would you like to file? Please choose from:\n" + grievanceTypes.english.map((type, i) => `${i+1}. ${type}`).join('\n')
            : "‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:\n" + grievanceTypes.hindi.map((type, i) => `${i+1}. ${type}`).join('\n');
          setStep(3);
          break;
          
        case 3:
          const typeIndex = parseInt(message) - 1;
          const selectedType = grievanceTypes[language][typeIndex] || message;
          setGrievanceData(prev => ({ ...prev, type: selectedType }));
          botResponse = language === "english"
            ? "Please describe your issue in detail:"
            : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§Ç:";
          setStep(4);
          break;
          
        case 4:
          setGrievanceData(prev => ({ ...prev, description: message }));
          botResponse = language === "english"
            ? "Where did this issue occur? (Address or location):"
            : "‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§π‡§æ‡§Å ‡§π‡•Å‡§à? (‡§™‡§§‡§æ ‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§®):";
          setStep(5);
          break;
          
        case 5:
          setGrievanceData(prev => ({ ...prev, location: message }));
          botResponse = language === "english"
            ? "When did this incident occur? (Date):"
            : "‡§Ø‡§π ‡§ò‡§ü‡§®‡§æ ‡§ï‡§¨ ‡§ò‡§ü‡•Ä? (‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï):";
          setStep(6);
          break;
          
        case 6:
          setGrievanceData(prev => ({ ...prev, date: message }));
          botResponse = language === "english"
            ? "What is the urgency level?\n1. Low\n2. Medium\n3. High\n4. Immediate"
            : "‡§§‡§æ‡§§‡•ç‡§ï‡§æ‡§≤‡§ø‡§ï‡§§‡§æ ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?\n1. ‡§ï‡§Æ\n2. ‡§Æ‡§ß‡•ç‡§Ø‡§Æ\n3. ‡§â‡§ö‡•ç‡§ö\n4. ‡§§‡§§‡•ç‡§ï‡§æ‡§≤";
          setStep(7);
          break;
          
        case 7:
          const urgencyIndex = parseInt(message) - 1;
          const selectedUrgency = urgencyLevels[language][urgencyIndex] || message;
          setGrievanceData(prev => ({ ...prev, urgency: selectedUrgency }));
          botResponse = language === "english"
            ? "Have you reported this issue before? (Yes/No):"
            : "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•Ä ‡§™‡§π‡§≤‡•á ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•Ä ‡§π‡•à? (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç):";
          setStep(8);
          break;
          
        case 8:
          setGrievanceData(prev => ({ ...prev, previousReport: message }));
          if (message.toLowerCase().includes('yes') || message.toLowerCase().includes('‡§π‡§æ‡§Å')) {
            botResponse = language === "english"
              ? "What was the outcome of your previous report?"
              : "‡§Ü‡§™‡§ï‡•Ä ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§•‡§æ?";
            setStep(9);
          } else {
            await generateGrievanceSummary();
            return;
          }
          break;
          
        case 9:
          setGrievanceData(prev => ({ ...prev, outcome: message }));
          await generateGrievanceSummary();
          return;
      }
      
      setMessages(prev => [...prev, { type: "bot", content: botResponse }]);
    } catch (error) {
      const errorMessage = language === 'hindi' 
        ? '‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§'
        : 'Sorry, there was a technical issue.';
      setMessages(prev => [...prev, { type: "bot", content: errorMessage }]);
    } finally {
      setIsLoading(false);
    }
  };

  const generateGrievanceSummary = async () => {
    const grievanceId = `GRV-${Date.now()}`;
    const summary = language === "english" ? `
üéØ GRIEVANCE SUMMARY

üìã Grievance ID: ${grievanceId}
üë§ Name: ${grievanceData.name}
üìû Contact: ${grievanceData.contact}
üìß Email: ${grievanceData.email}
üè∑Ô∏è Type: ${grievanceData.type}
üìç Location: ${grievanceData.location}
üìÖ Date of Incident: ${grievanceData.date}
‚ö° Urgency: ${grievanceData.urgency}

üìù Description:
${grievanceData.description}

${grievanceData.previousReport ? `üìã Previous Report: ${grievanceData.previousReport}` : ''}
${grievanceData.outcome ? `üìä Previous Outcome: ${grievanceData.outcome}` : ''}

‚úÖ Status: Successfully Submitted
üïê Expected Response: 15-30 working days
üì≤ Updates: Will be sent via SMS/Email

Thank you for using our Grievance Portal.
    ` : `
üéØ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂

üìã ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ID: ${grievanceId}
üë§ ‡§®‡§æ‡§Æ: ${grievanceData.name}
üìû ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï: ${grievanceData.contact}
üìß ‡§à‡§Æ‡•á‡§≤: ${grievanceData.email}
üè∑Ô∏è ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: ${grievanceData.type}
üìç ‡§∏‡•ç‡§•‡§æ‡§®: ${grievanceData.location}
üìÖ ‡§ò‡§ü‡§®‡§æ ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ: ${grievanceData.date}
‚ö° ‡§§‡§æ‡§§‡•ç‡§ï‡§æ‡§≤‡§ø‡§ï‡§§‡§æ: ${grievanceData.urgency}

üìù ‡§µ‡§ø‡§µ‡§∞‡§£:
${grievanceData.description}

${grievanceData.previousReport ? `üìã ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü: ${grievanceData.previousReport}` : ''}
${grievanceData.outcome ? `üìä ‡§™‡§ø‡§õ‡§≤‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ: ${grievanceData.outcome}` : ''}

‚úÖ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡§Æ‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ
üïê ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ: 15-30 ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§¶‡§ø‡§µ‡§∏
üì≤ ‡§Ö‡§™‡§°‡•á‡§ü: SMS/‡§à‡§Æ‡•á‡§≤ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!
    `;

    setMessages(prev => [...prev, { 
      type: "bot", 
      content: summary,
      isComplete: true
    }]);

    // Add guidance message
    const guidanceMessage = language === "english" 
      ? "üìã **Next Steps & Required Documents:**\n\n**For Grievance Filing:**\n‚Ä¢ Keep your Grievance ID for tracking\n‚Ä¢ Retain copies of all related documents\n‚Ä¢ Follow up if no response in stipulated time\n‚Ä¢ Escalate to higher authorities if needed\n\n**Required Documents (if applicable):**\n‚Ä¢ Copy of previous complaints\n‚Ä¢ Supporting evidence (photos, receipts)\n‚Ä¢ Identity proof\n‚Ä¢ Address proof\n‚Ä¢ Relevant certificates or permits\n\n**Process:**\n1. Submit grievance through official portal\n2. Wait for acknowledgment\n3. Track status using Grievance ID\n4. Respond to any queries from officials\n5. Escalate if unsatisfied with resolution"
      : "üìã **‡§Ö‡§ó‡§≤‡•á ‡§ï‡§¶‡§Æ ‡§î‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú:**\n\n**‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:**\n‚Ä¢ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ID ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§∏‡§≠‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§® ‡§Æ‡§ø‡§≤‡•á ‡§§‡•ã ‡§´‡•â‡§≤‡•ã ‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§™‡§°‡§º‡§®‡•á ‡§™‡§∞ ‡§â‡§ö‡•ç‡§ö ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç\n\n**‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú (‡§Ø‡§¶‡§ø ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã):**\n‚Ä¢ ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø\n‚Ä¢ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§∏‡§¨‡•Ç‡§§ (‡§´‡•ã‡§ü‡•ã, ‡§∞‡§∏‡•Ä‡§¶‡•á‡§Ç)\n‚Ä¢ ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£\n‚Ä¢ ‡§™‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£\n‚Ä¢ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ ‡§Ø‡§æ ‡§™‡§∞‡§Æ‡§ø‡§ü\n\n**‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ:**\n1. ‡§Ü‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§ï ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç\n2. ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§‡§ø ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç\n3. ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ID ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç\n4. ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç\n5. ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§∏‡•á ‡§∏‡§Ç‡§§‡•Å‡§∑‡•ç‡§ü ‡§® ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç";

    setTimeout(() => {
      setMessages(prev => [...prev, { type: "bot", content: guidanceMessage }]);
    }, 1000);
  };

  return (
    <div className="min-h-screen py-8 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-red-50 to-pink-100">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center">
              <MessageSquare className="w-8 h-8 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-2">Grievance Assistant</h1>
          <p className="text-xl text-gray-600">Smart grievance filing and tracking system</p>
        </div>

        {/* Language Toggle */}
        <div className="flex justify-center mb-6">
          <div className="bg-white rounded-full p-1 shadow-lg border">
            <div className="flex space-x-1">
              <Button 
                variant={language === "english" ? "default" : "ghost"} 
                size="sm"
                onClick={() => setLanguage("english")}
                className={language === "english" ? "bg-red-500 hover:bg-red-600" : ""}
              >
                English
              </Button>
              <Button 
                variant={language === "hindi" ? "default" : "ghost"} 
                size="sm"
                onClick={() => setLanguage("hindi")}
                className={language === "hindi" ? "bg-red-500 hover:bg-red-600" : ""}
              >
                ‡§π‡§ø‡§Ç‡§¶‡•Ä
              </Button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Chat Interface - Larger */}
          <div className="lg:col-span-3">
            <Card className="shadow-xl border-0">
              <CardHeader className="bg-gradient-to-r from-red-50 to-pink-50">
                <CardTitle className="flex items-center space-x-2">
                  <MessageSquare className="w-5 h-5 text-red-600" />
                  <span>Grievance Chat Assistant</span>
                  {isLoading && <div className="w-4 h-4 border-2 border-red-500 border-t-transparent rounded-full animate-spin ml-2"></div>}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div className="p-4">
                  <ChatInterface
                    messages={messages}
                    onSendMessage={handleUserMessage}
                    placeholder={language === "english" ? "Type your response..." : "‡§Ö‡§™‡§®‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."}
                    language={language}
                    className="h-[600px]"
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar - Smaller */}
          <div className="space-y-6">
            <Card className="shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center space-x-2 text-sm">
                  <AlertCircle className="w-4 h-4" />
                  <span>Important Tips</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="space-y-2 text-xs text-gray-600">
                  <li>‚Ä¢ Provide detailed information</li>
                  <li>‚Ä¢ Include evidence if available</li>
                  <li>‚Ä¢ Track using Grievance ID</li>
                  <li>‚Ä¢ Follow up if needed</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Grievance;
